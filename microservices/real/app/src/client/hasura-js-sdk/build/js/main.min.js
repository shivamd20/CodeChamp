var hasura = (function () {
'use strict';

(function(self) {
  'use strict';

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob();
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isDataView = function(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    };

    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue+','+value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) { items.push(name); });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) { items.push(value); });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) { items.push([name, value]); });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'omit';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit })
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    rawHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = 'status' in options ? options.status : 200;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);
      var xhr = new XMLHttpRequest();

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  };
  self.fetch.polyfill = true;
})(typeof self !== 'undefined' ? self : window);

var logError = function logError(i) {
  console.error(i);
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var defaultHeaders = {
    'Content-Type': 'application/json'
};

var emitError = function emitError(options, response) {
    logError('>>>');
    logError(options);
    logError('<<<');
    logError(response);
};

var defaultExceptionHandler = function defaultExceptionHandler() {
    return 0;
};

var maybeResponseJSON = function maybeResponseJSON(options, response, onSuccess) {
    var onException = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultExceptionHandler;

    response.text().then(function (t) {
        if (response.headers.get('Content-Type').indexOf('application/json') > -1) {
            onSuccess(JSON.parse(t));
        } else {
            onSuccess(t);
        }
    }, function (e) {
        logError('Successful response, but failed to read response: ');
        emitError(options, response);
        logError(e);
        onException();
    });
};

var hasuraGenUrl = function hasuraGenUrl(projectConfig) {
    return function (service, path) {
        var url = projectConfig.scheme + '://' + service + '.' + projectConfig.baseDomain + path;
        return url;
    };
};

var hasuraFetch = function hasuraFetch(user, projectConfig) {

    return function (options, onSuccess, onError) {
        var onException = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultExceptionHandler;

        if (!projectConfig.baseDomain) {
            logError('Please use hasura.setProject or hasura.setBaseDomain before making any API calls.');
            return;
        }

        var headers = _extends({}, defaultHeaders, options.headers);

        // Add the authorization header
        if (user.token && options.role !== 'anonymous') {
            headers.Authorization = 'Bearer ' + user.token;
        }

        if (options.role && options.role !== 'anonymous') {
            headers['X-Hasura-Role'] = options.role;
        }

        var url = hasuraGenUrl(projectConfig)(options.service, options.path);

        fetch(url, {
            method: options.method ? options.method : 'POST',
            headers: headers,
            body: options.json ? JSON.stringify(options.json) : options.body ? options.body : null
        }).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                maybeResponseJSON(options, response, onSuccess, onException);
            } else if (response.status >= 300 && response.status < 400) {
                logError('Redirect response received. Are you sure you\'re querying the right endpoint?');
                emitError(options, response);
                maybeResponseJSON(options, response, onError);
            } else if (response.status >= 400 && response.status < 500) {
                logError('Invalid request made (bad request):');
                emitError(options, response);
                maybeResponseJSON(options, response, onError);
            } else if (response.status > 500) {
                logError('Server error:');
                emitError(options, response);
                maybeResponseJSON(options, response, onError);
            } else {
                logError('Unhandled error in Hasura SDK. Please file an issue at github.com/hasura/support with the information below:');
                emitError(options, response);
                onException();
            }
        }, function (error) {
            logError('Failed to make request. Check http/https, service name, base domain or path values used?\n>>>');
            logError(options);
            logError('<<<');
            logError(error);
            onException(error);
        });
    };
};

var defaultExceptionHandler$1 = function defaultExceptionHandler() {
  return 0;
};

var Auth = function () {
  function Auth(hasura) {
    classCallCheck(this, Auth);

    this.hasura = hasura;
  }

  /* options: {
   *   recaptcha: ''
   * }
   *
   */


  createClass(Auth, [{
    key: 'signup',
    value: function signup(password, onSuccess) {
      var _this = this;

      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultExceptionHandler$1;

      if (this.hasura.user.token) {
        logError('A user session already exists. Use this.hasura.logout() first?');
        onError({ 'code': 'already-logged-in' });
        return;
      }

      var body = { username: this.hasura.user.username, password: password };
      if (this.hasura.user.email) {
        body.email = this.hasura.user.email;
      }
      if (this.hasura.user.mobile) {
        body.mobile = this.hasura.user.mobile;
      }

      this.hasura.fetch({ service: 'auth', path: '/signup', json: body }, function (user) {
        _this.hasura.user = _extends({}, _this.hasura.user, {
          id: user.hasura_id,
          roles: user.hasura_roles
        });
        if (user.auth_token) {
          _this.hasura.user.token = user.auth_token;
        }
        _this.hasura.saveUser();
        onSuccess(user);
      }, function (r) {
        console.log(r);
        onError(r);
      });
    }
  }, {
    key: 'login',
    value: function login(password, onSuccess) {
      var _this2 = this;

      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultExceptionHandler$1;

      if (this.hasura.user.token) {
        logError('A user session already exists. Use this.hasura.logout() first?');
        onError({ 'code': 'already-logged-in' });
        return;
      }

      this.hasura.fetch({ service: 'auth', path: '/login', json: { username: this.hasura.user.username, password: password } }, function (user) {
        _this2.hasura.user = _extends({}, _this2.hasura.user, {
          id: user.hasura_id,
          roles: user.hasura_roles,
          token: user.auth_token
        });
        _this2.hasura.saveUser();
        onSuccess(user);
      }, function (r) {
        console.log(r);
        onError(r);
      });
    }
  }, {
    key: 'logout',
    value: function logout(onSuccess) {
      var _this3 = this;

      var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultExceptionHandler$1;

      this.hasura.fetch({ service: 'auth', path: '/user/logout' }, function () {
        _this3.hasura.clearUser();
        onSuccess();
      }, function (r) {
        console.log(r);
        onError(r);
      });
    }
  }, {
    key: 'signUpPromise',
    value: function signUpPromise(password) {
      var self = this;
      return new Promise(function (resolve, reject) {
        self.signup(password, function (response) {
          resolve(response);
        }, function (error) {
          reject(error);
        }, function (exception) {
          reject(exception);
        });
      });
    }
  }, {
    key: 'loginPromise',
    value: function loginPromise(password) {
      var self = this;
      return new Promise(function (resolve, reject) {
        self.login(password, function (response) {
          resolve(response);
        }, function (error) {
          reject(error);
        }, function (exception) {
          reject(exception);
        });
      });
    }
  }, {
    key: 'logoutPromise',
    value: function logoutPromise() {
      var self = this;
      return new Promise(function (resolve, reject) {
        self.logout(function (response) {
          resolve(response);
        }, function (error) {
          reject(error);
        });
      });
    }
  }]);
  return Auth;
}();

var defaultExceptionHandler$2 = function defaultExceptionHandler() {
  return 0;
};

var Data = function () {
  function Data(hasura) {
    classCallCheck(this, Data);

    this.hasura = hasura;
  }

  createClass(Data, [{
    key: 'queryAsRole',
    value: function queryAsRole(role, query, onSuccess) {
      var onError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultExceptionHandler$2;

      this.query(query, onSuccess, onError, role);
    }
  }, {
    key: 'queryAsRolePromise',
    value: function queryAsRolePromise(role, query) {
      this.queryPromise(query, role);
    }
  }, {
    key: 'query',
    value: function query(_query, onSuccess) {
      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultExceptionHandler$2;
      var role = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var opts = { service: 'data', path: '/v1/query', json: _query };
      if (role) {
        opts.role = role;
      }
      this.hasura.fetch(opts, function (result) {
        onSuccess(result);
      }, function (e) {
        logError(e);
        onError(e);
      });
    }
  }, {
    key: 'queryPromise',
    value: function queryPromise(query, role) {
      var self = this;
      return new Promise(function (resolve, reject) {
        self.query(query, function (success) {
          resolve(success);
        }, function (error) {
          reject(error);
        }, role);
      });
    }
  }]);
  return Data;
}();

var defaultExceptionHandler$3 = function defaultExceptionHandler() {
  return 0;
};

var guid = function guid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c == 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
};

var File = function () {
  function File(hasura) {
    classCallCheck(this, File);

    this.hasura = hasura;
  }

  createClass(File, [{
    key: 'queryPromise',
    value: function queryPromise(hasuraFetchOptions) {
      return new Promise(function (resolve, reject) {
        this.query(hasuraFetchOptions, function (response) {
          resolve(response);
        }, function (error) {
          reject(error);
        });
      });
    }
  }, {
    key: 'query',
    value: function query(hasuraFetchOptions, onSuccess, onError) {
      var opts = hasuraFetchOptions;
      this.hasura.fetch(opts, function (result) {
        onSuccess(result);
      }, function (e) {
        logError(e);
        onError(e);
      });
    }
  }, {
    key: 'uploadPromise',
    value: function uploadPromise(fileInput) {
      return new Promise(function (resolve, reject) {
        this.upload(fileInput, function (response) {
          resolve(response);
        }, function (error) {
          reject(error);
        });
      });
    }
  }, {
    key: 'upload',
    value: function upload(fileInput, onSuccess) {
      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultExceptionHandler$3;

      var file = fileInput.files[0];
      if (!file) {
        logError('No file received from expected input[type=file] DOM element.');
        logError(fileInput);
        return;
      }

      var hasuraFetchOptions = {
        service: 'filestore',
        path: '/v1/file/' + guid(),
        headers: { 'Content-Type': file.type },
        body: file
      };

      this.query(hasuraFetchOptions, onSuccess, onError);
    }
  }, {
    key: 'delete',
    value: function _delete(fileId, onSuccess) {
      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultExceptionHandler$3;

      var hasuraFetchOptions = {
        service: 'filestore',
        method: 'DELETE',
        path: '/v1/file/' + fileId
      };

      this.query(hasuraFetchOptions, onSuccess, onError);
    }
  }, {
    key: 'deletePromise',
    value: function deletePromise(fileId) {
      return new Promise(function (resolve, reject) {
        this.delete(fileId, function (response) {
          resolve(response);
        }, function (error) {
          reject(error);
        });
      });
    }
  }, {
    key: 'download',
    value: function download(fileId) {
      var link = document.createElement('a');
      link.download = fileId;
      link.href = this.hasura.genUrl('filestore', '/v1/file/' + fileId);
      link.click();
    }
  }]);
  return File;
}();

var anonUser = {
  username: 'anonymous',
  id: 0,
  roles: ['anonymous'],
  token: null
};

var localStorage = window.localStorage;

var hasura = function () {
  /*
   * hasura.user
   * hasura.auth (signup/login/logout)
   * hasura.data.query({}, onSuccess, onError)
   * hasura.fetch(options, onSuccess, onError)
   */
  function hasura() {
    classCallCheck(this, hasura);

    // Load user-data from localStorage
    var u = localStorage.getItem('hasura.user');
    if (u) {
      this.user = JSON.parse(u);
    } else {
      this.user = anonUser;
    }

    this.projectConfig = {
      scheme: 'https',
      baseDomain: null
    };
    this.resetFetch();
    this.auth = new Auth(this);
    this.data = new Data(this);
    this.file = new File(this);
  }

  createClass(hasura, [{
    key: 'resetFetch',
    value: function resetFetch() {
      this.fetch = hasuraFetch(this.user, this.projectConfig);
      var self = this;
      this.fetchPromise = function (query) {
        return new Promise(function (resolve, reject) {
          self.fetch(query, function (response) {
            resolve(response);
          }, function (error) {
            reject(error);
          });
        });
      };
      this.genUrl = hasuraGenUrl(this.projectConfig);
      return this;
    }
  }, {
    key: 'setProject',
    value: function setProject(name) {
      this.projectConfig.baseDomain = name + '.hasura-app.io';
      this.resetFetch();
      return this;
    }
  }, {
    key: 'setBaseDomain',
    value: function setBaseDomain(baseDomain) {
      this.projectConfig.baseDomain = baseDomain;
      this.resetFetch();
      return this;
    }
  }, {
    key: 'disableHttps',
    value: function disableHttps() {
      this.projectConfig.scheme = 'http';
      this.resetFetch();
    }
  }, {
    key: 'setUsername',
    value: function setUsername(username) {
      this.user.username = username;
      this.saveUser();
    }
  }, {
    key: 'setUserInfo',
    value: function setUserInfo(userInfo) {
      var _this = this;

      this.user = _extends({}, this.user, {
        id: userInfo.hasura_id,
        roles: userInfo.hasura_roles,
        token: userInfo.auth_token
      });

      ['username', 'email', 'mobile'].map(function (x) {
        _this.user[x] = userInfo[x] ? userInfo[x] : _this.user[x];
      });

      this.saveUser();
    }
  }, {
    key: 'saveUser',
    value: function saveUser() {
      localStorage.setItem('hasura.user', JSON.stringify(this.user));
      this.resetFetch();
    }
  }, {
    key: 'clearUser',
    value: function clearUser() {
      this.user = anonUser;
      this.saveUser();
    }
  }, {
    key: 'clearSession',
    value: function clearSession() {
      this.clearUser();
    }
  }]);
  return hasura;
}();

var main = new hasura();

return main;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
